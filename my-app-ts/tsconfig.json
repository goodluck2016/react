{
  "compilerOptions": {
    "": false, // 不需要显示地声明变量的类型any
    "target": "es5", // 编译后的目标javascript版本, ES5, ES6/ES2015, ES2016, ES2017, ES2018, ES2019, ES2020, ESNext
    "lib": [
      "dom", // document.getElementById("root")
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true, // 允许混合编译JavaScript文件
    "skipLibCheck": true,
    "esModuleInterop": true, // 允许我们使用commonjs的方式import默认文件, import React from 'react'
    // "esModuleInterop": false, import * as React from 'react' 
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext", // 配置的是我们代码的模块系统， Node.js的CommonJS、ES6标准的esnext、requirejs的AMD
    "moduleResolution": "node", // 决定了我们编译器的工作方式，"node" and "classic"(2019年已废弃)
    "resolveJsonModule": true,
    "isolatedModules": true, // 编译器会将每个文件作为单独的模块来使用
    "noEmit": true, // 表示当发生错误的时候，编译器不要生成 JavaScript 代码
    "jsx": "react-jsx", // 允许编译器支持编译 react 代码
    "plugins": [
      {
        "name": "typescript-plugin-css-modules"
      }
    ]
  },
   // 此选项列出我们需要编译的文件，“文件路径”选项需要文件的相对或绝对路径，如：
  //  "**" -任意子目录，
  // "*" -任意文件名，
  // "?" -只要字符跟随"?", 这个字符就会被视为可忽略字符（e.g., "src/*.tsx?"则同时指代"src/*.tsx"与"src/*.ts"）
  "include": [
    "src"
  ]
}
